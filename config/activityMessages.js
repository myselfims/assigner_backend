export const activityMessages = {
  // 🏢 Workspaces
  newWorkspaceCreated: {
    entityType: "workspace",
    action: "created",
    message: "📌 New workspace '{{workspaceName}}' was created by '{{creatorName}}'.",
  },
  workspaceUpdated: {
    entityType: "workspace",
    action: "updated",
    message: "🔄 Workspace '{{workspaceName}}' was updated by '{{editorName}}'.",
  },
  workspaceDeleted: {
    entityType: "workspace",
    action: "deleted",
    message: "❌ Workspace '{{workspaceName}}' was deleted by '{{deleterName}}'.",
  },

  // 📌 Projects
  newProjectCreated: {
    entityType: "project",
    action: "created",
    message: "📌 New project '{{projectName}}' was created by '{{creatorName}}'.",
  },
  projectUpdated: {
    entityType: "project",
    action: "updated",
    message: "🔄 Project '{{projectName}}' was updated by '{{editorName}}'.",
  },
  projectDeleted: {
    entityType: "project",
    action: "deleted",
    message: "❌ Project '{{projectName}}' was deleted by '{{deleterName}}'.",
  },

  // 🏗️ Tasks
  taskCreated: {
    entityType: "task",
    action: "created",
    message: "🆕 Task '{{taskName}}' was created in project '{{projectName}}' by '{{creatorName}}'.",
  },
  taskUpdated: {
    entityType: "task",
    action: "updated",
    message: "🔄 Task '{{taskName}}' in project '{{projectName}}' was updated by '{{editorName}}'.",
  },
  taskDeleted: {
    entityType: "task",
    action: "deleted",
    message: "❌ Task '{{taskName}}' in project '{{projectName}}' was deleted by '{{deleterName}}'.",
  },
  taskStatusChanged: {
    entityType: "task",
    action: "status_changed",
    message: "📌 Task '{{taskName}}' status changed to '{{newStatus}}' by '{{editorName}}'.",
  },
  taskAssigned: {
    entityType: "task",
    action: "assigned",
    message: "👤 Task '{{taskName}}' was assigned to '{{assigneeName}}' by '{{assignerName}}'.",
  },
  taskUnassigned: {
    entityType: "task",
    action: "unassigned",
    message: "🚫 Task '{{taskName}}' was unassigned from '{{assigneeName}}' by '{{removerName}}'.",
  },

  // 📊 Dashboard & Reports
  reportGenerated: {
    entityType: "report",
    action: "generated",
    message: "📊 Report '{{reportName}}' was generated by '{{userName}}'.",
  },
  dashboardUpdated: {
    entityType: "dashboard",
    action: "updated",
    message: "🔄 Dashboard settings were updated by '{{editorName}}'.",
  },

  // 🏷️ Board & Sprints
  sprintCreated: {
    entityType: "sprint",
    action: "created",
    message: "🚀 Sprint '{{sprintName}}' was created in project '{{projectName}}' by '{{creatorName}}'.",
  },
  sprintCompleted: {
    entityType: "sprint",
    action: "completed",
    message: "🎯 Sprint '{{sprintName}}' was marked as completed by '{{editorName}}'.",
  },

  // 👥 Members & Roles
  memberAdded: {
    entityType: "member",
    action: "added",
    message: "👤 '{{memberName}}' was added to workspace '{{workspaceName}}' by '{{adderName}}'.",
  },
  memberRemoved: {
    entityType: "member",
    action: "removed",
    message: "🚫 '{{memberName}}' was removed from workspace '{{workspaceName}}' by '{{removerName}}'.",
  },
  memberRoleUpdated: {
    entityType: "member",
    action: "role_updated",
    message: "🔄 Role of '{{memberName}}' in workspace '{{workspaceName}}' was changed to '{{newRole}}' by '{{editorName}}'.",
  },

  // 🔔 Notifications & Activity Logs
  activityLogged: {
    entityType: "activity_log",
    action: "logged",
    message: "📢 '{{activityMessage}}' was logged by '{{userName}}'.",
  },
  notificationSent: {
    entityType: "notification",
    action: "sent",
    message: "📨 Notification '{{notificationTitle}}' was sent to '{{recipientName}}'.",
  },

  // 🔧 Settings & Preferences
  settingsUpdated: {
    entityType: "settings",
    action: "updated",
    message: "🔧 User '{{userName}}' updated their settings.",
  },
  themeChanged: {
    entityType: "settings",
    action: "theme_changed",
    message: "🎨 User '{{userName}}' changed the theme to '{{newTheme}}'.",
  },

  // 🔐 Security & Authentication
  passwordChanged: {
    entityType: "security",
    action: "password_changed",
    message: "🔑 User '{{userName}}' changed their password.",
  },
  twoFactorEnabled: {
    entityType: "security",
    action: "2fa_enabled",
    message: "🔒 Two-Factor Authentication was enabled by '{{userName}}'.",
  },
  twoFactorDisabled: {
    entityType: "security",
    action: "2fa_disabled",
    message: "⚠️ Two-Factor Authentication was disabled by '{{userName}}'.",
  },
  loginAttempt: {
    entityType: "security",
    action: "login_attempt",
    message: "🔑 User '{{userName}}' attempted to log in from IP '{{ipAddress}}'.",
  },
  loginSuccess: {
    entityType: "security",
    action: "login_success",
    message: "✅ User '{{userName}}' successfully logged in.",
  },
  loginFailed: {
    entityType: "security",
    action: "login_failed",
    message: "❌ Failed login attempt for '{{userName}}' from IP '{{ipAddress}}'.",
  },

  // 📅 Calendar & Scheduling
  eventCreated: {
    entityType: "event",
    action: "created",
    message: "📅 Event '{{eventName}}' was created by '{{creatorName}}'.",
  },
  eventUpdated: {
    entityType: "event",
    action: "updated",
    message: "🔄 Event '{{eventName}}' was updated by '{{editorName}}'.",
  },
  eventDeleted: {
    entityType: "event",
    action: "deleted",
    message: "❌ Event '{{eventName}}' was deleted by '{{deleterName}}'.",
  },

  // 📁 Files & Documents
  fileUploaded: {
    entityType: "file",
    action: "uploaded",
    message: "📂 File '{{fileName}}' was uploaded to project '{{projectName}}' by '{{uploaderName}}'.",
  },
  fileDeleted: {
    entityType: "file",
    action: "deleted",
    message: "🗑️ File '{{fileName}}' was deleted from project '{{projectName}}' by '{{deleterName}}'.",
  },

  // 📞 Communication & Chat
  messageSent: {
    entityType: "chat",
    action: "sent",
    message: "💬 Message sent by '{{senderName}}' in '{{chatRoom}}'.",
  },
  videoCallStarted: {
    entityType: "chat",
    action: "video_call_started",
    message: "📹 Video call started by '{{callerName}}' in '{{chatRoom}}'.",
  },
  voiceCallStarted: {
    entityType: "chat",
    action: "voice_call_started",
    message: "📞 Voice call started by '{{callerName}}' in '{{chatRoom}}'.",
  },
};


export function generateLogContent(messageKey, values) {
  const message = activityMessages[messageKey];

  if (!message) {
    throw new Error(`Invalid message key: ${messageKey}`);
  }

  // Replace placeholders in all string properties
  const filledMessage = Object.fromEntries(
    Object.entries(message).map(([key, value]) => [
      key,
      typeof value === "string" ? value.replace(/{{(.*?)}}/g, (_, k) => values[k] || `{{${k}}}`) : value,
    ])
  );

  return filledMessage;
}

